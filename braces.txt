using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;
class Solution
{
     // Define other methods and classes here
    public static bool IsBalanced(string expression)
    {
        // argument validation
        if (expression == null)
            throw new ArgumentNullException(nameof(expression));

        // definition
        var brackets = new[] { "()", "{}", "[]" };
        var pairedBrackets = brackets.ToDictionary(x => x[0], x => x[1]);

        // non-bracket characters doesn't affect the result,
        // so we can filter them out to make the flow simpler
        Func<char, bool> isBracket = c => pairedBrackets.ContainsKey(c) || pairedBrackets.ContainsValue(c);

        // implementation
        var stack = new Stack<char>();
        foreach (var c in expression.Where(isBracket))
        {
            var isOpening = pairedBrackets.ContainsKey(c);
            var pair = isOpening
                ? pairedBrackets[c]
                : pairedBrackets.First(x => x.Value == c).Key;

            if (isOpening)
            {
                stack.Push(c);
            }
            else
            {
                // closing bracket with empty stack
                if (!stack.Any())
                    return false;

                // closing bracket doesnt match last opening bracket
                if (stack.Peek() != pair)
                    return false;

                // matched
                stack.Pop();
            }
        }

        return !stack.Any();
    }

    // Complete the braces function below.
    static string[] braces(string[] values)
    {
        List<string> result = new List<string>();
        var expressions = values.ToList();
        foreach (var expression in expressions)
        {
            result.Add(IsBalanced(expression) ? "YES" : "NO");
        }
        return result11.ToArray();
    }
    static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);
        int valuesCount = Convert.ToInt32(Console.ReadLine());
        string[] values = new string[valuesCount];
        for (int i = 0; i < valuesCount; i++)
        {
            string valuesItem = Console.ReadLine();
            values[i] = valuesItem;
        }
        string[] res = braces(values);

        Console.WriteLine(string.Join("\n", res));
        Console.Read();
        textWriter.Flush();
        textWriter.Close();
    }
}